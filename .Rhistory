#
# -------------------------------------------
# Site
for (s in 1:S) {
# ---------------------------------
# Abundance Submodel
# ---------------------------------
# Normal
log(mu[s]) <- beta0 + beta1 * Herb_COH[s, 1] +  beta2 * Woody_SPLIT[s, 1]
N[s] ~ dnorm(mu[s], sigma_mu[s])
# # Log-Normal
# mu[s] <-  S_RE[s] + beta1 * Herb_COH[s, 1] +  beta2 * Woody_SPLIT[s, 1]
# N[s] ~ dlnorm(mu[s], sigma_mu[s])
# Survey
for (j in 1:J[s]) {
# ---------------------------------
# Detection Submodel
# ---------------------------------
logit(p_a[s, j]) <- alpha0 + alpha1 * N[s]  + alpha2 * Wind[j,1] + alpha3 * VegDens[s, 1]
# ---------------------------------
# Call rate Submodel
# ---------------------------------
# Survey Random Effect
log(delta[s, j]) <- J_RE[j]
# ---------------------------------
# Observations
# ---------------------------------
y[s, j] ~ dbin(p_a[s, j], 1)
# ---------------------------------
# True Positives
# ---------------------------------
tp[s, j] <- delta[s, j] * N[s] / (delta[s, j] * N[s] + omega)
# ---------------------------------
# PPC Abundance
# ---------------------------------
y_pred[s, j] ~ dbin(p_a[s, j], 1)
resid_y[s, j] <- pow(pow(y[s, j], 0.5) - pow(p_a[s, j], 0.5), 2)
resid_y_pred[s, j] <- pow(pow(y_pred[s, j], 0.5) - pow(p_a[s, j], 0.5), 2)
} # End J
# Surveys with Vocalizations
for (j in 1:J_r[s]) {
# ---------------------------------
# Vocalizations
# ---------------------------------
# Zero Truncated Negative Binomial
v[s, A_times[s, j]] ~ dpois((delta[s, A_times[s, j]] * N[s] + omega) * phi[s, A_times[s, j]] * y[s, A_times[s, j]]) T(1, )
# ---------------------------------
# PPC calls
# ---------------------------------
v_pred[s, j] ~ dpois((delta[s, A_times[s, j]] * N[s] + omega) * phi[s, A_times[s, j]] * y[s, A_times[s, j]]) T(1, )
mu_v[s, j] <- ((delta[s, A_times[s, j]] * N[s] + omega) * phi[s, A_times[s, j]]) / (1 - exp(-1 * ((delta[s, A_times[s, j]] * N[s] + omega) * phi[s, A_times[s, j]])))
resid_v[s, j] <- pow(pow(v[s, A_times[s, j]], 0.5) - pow(mu_v[s, j], 0.5), 2)
resid_v_pred[s, j] <- pow(pow(v_pred[s, j], 0.5) - pow(mu_v[s, j], 0.5), 2)
} # End J_r
} # End S
# -------------------------------------------
# Manual validation
# -------------------------------------------
for (s in 1:S_val) {
for (j in 1:J_val[s]) {
K[s, j] ~ dbin(tp[sites_a[s], j], v[sites_a[s], val_times[s, j]])
k[s, val_times[s, j]] ~ dhyper(K[s, j], v[sites_a[s], val_times[s, j]] - K[s, j], n[s, val_times[s, j]], 1)
} # End J
} # End S
# -------------------------------------------
# PPC and Bayesian P-value
# -------------------------------------------
for (s in 1:S_A) {
tmp_v[s] <- sum(resid_v[sites_a_v[s], 1:J_r[sites_a_v[s]]])
tmp_v_pred[s] <- sum(resid_v_pred[sites_a_v[s], 1:J_r[sites_a_v[s]]])
}
fit_y <- sum(resid_y[sites_a, 1:J_A])
fit_y_pred <- sum(resid_y_pred[sites_a, 1:J_A])
fit_v <- sum(tmp_v[1:S_A])
fit_v_pred <- sum(tmp_v_pred[1:S_A])
bp_y <- step(fit_y_pred - fit_y)
bp_v <- step(fit_v_pred - fit_v)
# -------------------------------------------
# Derive Parameters
# -------------------------------------------
# Abundance
N_tot <- sum(N[])
}
", fill = TRUE, file = "./JAGs_Models/AV_Bsong_Model.txt")
# ------------End Model-------------
# -------------------------------------------------------
# Fit Model
# -------------------------------------------------------
fm1 <- jagsUI::jags(data = data,
inits = inits,
parameters.to.save = params,
model.file = "./JAGs_Models/AV_Bsong_Model.txt",
n.iter = n_iter,
n.burnin = n_burnin,
n.chains = n_chains,
n.thin = n_thin,
n.adapt = n_adapt,
parallel = FALSE,
# n.cores = workers,
verbose = TRUE,
DIC = FALSE)
# Rhat
check_rhat(fm1$Rhat, threshold = 1.1)
# Trace plots (takes a few minutes)
pdf("./Figures/ARU_Bsong_TracePlots.pdf", width = 8, height = 10) # create & save plots
# Trace plots
MCMCvis::MCMCtrace(fm1,
params = c('mu',
'N_tot',
'N',
'beta0',
'beta1',
'beta2',
'tau_s',
'S_RE',
'sigma_mu',
'alpha0',
'alpha1',
'alpha2',
'alpha3',
'mu_j',
'tau_j',
'J_RE',
'omega',
'delta',
'phi',
'r_phi',
'lam_phi'
),
pdf = T,
filename = "ARU_Bsong_TracePlots.pdf",
wd = "./Figures"
)
# Abundance
fit_y_data <- data.frame(
observed = fm1$sims.list$fit_y,  # Observed values
predicted = fm1$sims.list$fit_y_pred,  # Predicted values
type = rep(c("Observed", "Predicted"), each = length(fm1$sims.list$fit_y))
)
# Calls
fit_v_data <- data.frame(
observed = fm1$sims.list$fit_v,  # Observed values
predicted = fm1$sims.list$fit_v_pred,  # Predicted values
type = rep(c("Observed", "Predicted"), each = length(fm1$sims.list$fit_v))
)
# Bayes P-value
# P-value = 0.5 means good fit, = 1 or 0 is a poor fit
mn_bpy <- round(mean(fm1$summary["bp_y",1]), 2)
mn_bpv <- round(mean(fm1$summary["bp_v",1]), 2)
# y
y_PPC_Dens <- ggplot(fit_y_data) +
geom_density(aes(x = observed, fill = "Observed"), alpha = 0.5) +
geom_density(aes(x = predicted, fill = "Predicted"), alpha = 0.5) +
scale_fill_manual(values = c("Observed" = "blue", "Predicted" = "red")) +
labs(title = "A)",
x = "",
y = "Density") +
theme_minimal() +
theme(legend.title = element_blank()) +
theme(legend.position = "none") +
annotate("text", x = 40, y = 0.13, label = paste0("Bayes p-value = ", mn_bpy), hjust = 0)
# v
v_PPC_Dens <- ggplot(fit_v_data) +
geom_density(aes(x = observed, fill = "Observed"), alpha = 0.5) +
geom_density(aes(x = predicted, fill = "Predicted"), alpha = 0.5) +
scale_fill_manual(values = c("Observed" = "blue", "Predicted" = "red")) +
labs(title = "B)",
x = "Fit Values",
y = "Density") +
theme_minimal() +
theme(legend.title = element_blank()) +
theme(legend.position = "none") +
annotate("text", x = 40, y = 0.06, label = paste0("Bayes p-value = ", mn_bpv), hjust = 0)
# Multipanel figure
grid.arrange(y_PPC_Dens, v_PPC_Dens, nrow = 2)
# Multipanel figure
grid.arrange(y_PPC_Dens, v_PPC_Dens, nrow = 2)
y_PPC_Dens
# Bayes P-value
# P-value = 0.5 means good fit, = 1 or 0 is a poor fit
mn_bpy <- round(mean(fm1$summary["bp_y",1]), 2)
mn_bpv <- round(mean(fm1$summary["bp_v",1]), 2)
# y
y_PPC_Dens <- ggplot(fit_y_data) +
geom_density(aes(x = observed, fill = "Observed"), alpha = 0.5) +
geom_density(aes(x = predicted, fill = "Predicted"), alpha = 0.5) +
scale_fill_manual(values = c("Observed" = "blue", "Predicted" = "red")) +
labs(title = "A)",
x = "",
y = "Density") +
theme_minimal() +
theme(legend.title = element_blank()) +
theme(legend.position = "none") +
annotate("text", x = 40, y = 0.13, label = paste0("Bayes p-value = ", mn_bpy), hjust = 0)
# v
v_PPC_Dens <- ggplot(fit_v_data) +
geom_density(aes(x = observed, fill = "Observed"), alpha = 0.5) +
geom_density(aes(x = predicted, fill = "Predicted"), alpha = 0.5) +
scale_fill_manual(values = c("Observed" = "blue", "Predicted" = "red")) +
labs(title = "B)",
x = "Fit Values",
y = "Density") +
theme_minimal() +
theme(legend.title = element_blank()) +
theme(legend.position = "none") +
annotate("text", x = 40, y = 0.06, label = paste0("Bayes p-value = ", mn_bpv), hjust = 0)
# Multipanel figure
grid.arrange(y_PPC_Dens, v_PPC_Dens, nrow = 2)
# Combine chains
combined_chains <- as.mcmc(do.call(rbind, fm1$samples))
# Extract beta estimates
beta0_samples <- combined_chains[, "beta0"]
beta1_samples <- combined_chains[, "beta1"]
beta2_samples <- combined_chains[, "beta2"]
# Compute 95% CI for each beta
beta_df <- data.frame(
value = c(beta0_samples,
beta1_samples,
beta2_samples),
parameter = rep(c("beta0",
"beta1",
"beta2"), each = length(beta0_samples))
) %>%
group_by(parameter) %>%
filter(value >= quantile(value, 0.025) & value <= quantile(value, 0.975))
# Add model
beta_df$Model <- model_name
# Create Summary
beta_summary <- beta_df %>%
group_by(parameter, Model) %>%
summarise(
mean = mean(value),
LCI = min(value),
UCI = max(value),
.groups = "drop"
)
# view
print(beta_summary)
# Export beta dataframe and summary
saveRDS(beta_df, "./Data/Model_Data/ARU_Bsong_beta_df.rds")
write.csv(beta_summary, "./Figures/ARU_Bsong_BetaSummary.csv")
# Extract alpha estimates
alpha0_samples <- combined_chains[, "alpha0"]
alpha1_samples <- combined_chains[, "alpha1"]
alpha2_samples <- combined_chains[, "alpha2"]
alpha3_samples <- combined_chains[, "alpha3"]
# Extract site random effect
jRE_samples <- combined_chains[, c("J_RE[1]", "J_RE[2]","J_RE[3]","J_RE[4]","J_RE[5]",
"J_RE[6]", "J_RE[7]", "J_RE[8]", "J_RE[9]", "J_RE[10]",
"J_RE[11]", "J_RE[12]", "J_RE[13]", "J_RE[14]"
)]
jRE_samples <- rowMeans(jRE_samples) # Row means
# Compute 95% CI for each beta
alpha_df <- data.frame(
value = c(alpha0_samples,
alpha1_samples,
alpha2_samples,
alpha3_samples,
jRE_samples),
parameter = rep(c("alpha0",
"alpha1",
"alpha2",
"alpha3",
"jRE"), each = length(alpha0_samples))
) %>%
group_by(parameter) %>%
filter(value >= quantile(value, 0.025) & value <= quantile(value, 0.975))
# Add model
alpha_df$Model <- model_name
# Create summary
alpha_summary <- alpha_df %>%
group_by(parameter, Model) %>%
summarise(
mean = mean(value),
LCI = min(value),
UCI = max(value),
.groups = "drop"   # optional: ungroups after summarising
)
# view
print(alpha_summary)
# Export alpha summary
saveRDS(alpha_summary, "./Data/Model_Data/ARU_Bsong_alpha_summary.rds")
# Extract samples
p_samples <- combined_chains[, grepl("^p_a\\[", colnames(combined_chains))]
# Combine
all_p_samples <- as.vector(p_samples)
# Create summary
p_summary <- data.frame(
mean = mean(all_p_samples),
LCI = quantile(all_p_samples, 0.025),
UCI = quantile(all_p_samples, 0.975)
)
# Add model
p_summary$Model <- model_name
# Add parameter name
p_summary$Parameter <- "detection"
# view
print(p_summary)
# Extract samples
delta_samples <- as.matrix(fm1$samples)[, grepl("^delta\\[", colnames(as.matrix(fm1$samples)))]
# Combine
all_deltas <- as.vector(delta_samples)
# Create summary
delta_summary <- data.frame(
mean = mean(all_deltas),
LCI = quantile(all_deltas, 0.025),
UCI = quantile(all_deltas, 0.975)
)
# Add model
delta_summary$Model <- model_name
# Add parameter name
delta_summary$Parameter <- "vocal rate"
# View
print(delta_summary)
# Combine with detection
param_summary <- rbind(p_summary, delta_summary)
# View
print(param_summary)
# Extract abundance posterior
Ntot_samples <- combined_chains[ ,"N_tot"]
# Area in hectares of a 200m radius circle
area <- pi * (200^2) / 10000  # Area in hectares
# Calculate density (individuals per hectare)
dens_samples <- Ntot_samples / (area * 27)
# Create data frame for density
dens_df <- data.frame(Model = rep(model_name, length(dens_samples)), Density = dens_samples)
colnames(dens_df)[2] <- "Density"
head(dens_df)
# Abundance estimates
abund_df <- dens_df # posterior estimates
abund_df$Density <- abund_df$Density * 1096
abund_summary <- abund_df %>% # summary
group_by(Model) %>%
summarise(
mean = mean(Density),
LCI = quantile(Density, 0.025),
UCI = quantile(Density, 0.975)
)
# View
print(abund_summary)
# Add parameter name
abund_summary$Parameter <- "abundance"
# Combine with detection and vocal rate
param_summary <- rbind(param_summary, abund_summary)
# View
print(param_summary)
# Trim abund df to 95% CI
abund_95df <- abund_df %>%
left_join(abund_summary, by = "Model") %>%
filter(Density >= LCI & Density <= UCI) %>%
select(-LCI, -UCI)
# Export abundance df and parameter summary
saveRDS(abund_95df, "./Data/Model_Data/ARU_Bsong_abund_df.rds")
saveRDS(param_summary, "./Data/Model_Data/ARU_Bsong_param_summary.rds")
gc()
# Read in abundance df
cmr_abund_df <-readRDS("./Data/Model_Data/PC_MCR_abund_df.rds")
bsong_abund_df <- readRDS("./Data/Model_Data/ARU_Bsong_abund_df.rds")
bnet_abund_df <- readRDS("./Data/Model_Data/ARU_Bnet_abund_df.rds")
# Combine abundance df into one dataframe
abund_df <- rbind(cmr_abund_df,
bsong_abund_df,
bnet_abund_df
)
abund_df <- abund_df %>% mutate(Model = factor(Model, levels = c("PC MCR",  "AV Bsong", "AV Bnet")))
# Plot violin
abundViolin <- ggplot(abund_df, aes(x = Model, y = Density, fill = Model)) +
geom_violin(trim = FALSE, alpha = 0.6, adjust = 5) +
stat_summary(fun = mean, geom = "point", shape = 20,
size = 3, fill = "black") +
labs(x = "Model", y = "Abundance") +
scale_fill_manual(values = c("PC MCR" = "orange",
"AV Bsong" = "red",
"AV Bnet" = "blue"
)) +
scale_y_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, by = 50),
labels = scales::comma) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, face = "bold"),
axis.title.x = element_text(face = "bold", margin = margin(t = 10)),
axis.title.y = element_text(face = "bold", margin = margin(r = 10)),
panel.grid = element_blank(),
legend.position = "none")
# View
abundViolin
# Plot violin
abundViolin <- ggplot(abund_df, aes(x = Model, y = Density, fill = Model)) +
geom_violin(trim = FALSE, alpha = 0.6, adjust = 5) +
stat_summary(fun = mean, geom = "point", shape = 20,
size = 3, fill = "black") +
labs(x = "Model", y = "Abundance") +
scale_fill_manual(values = c("PC MCR" = "orange",
"AV Bsong" = "red",
"AV Bnet" = "blue"
)) +
scale_y_continuous(limits = c(0, 2000),
breaks = seq(0, 2000, by = 100),
labels = scales::comma) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, face = "bold"),
axis.title.x = element_text(face = "bold", margin = margin(t = 10)),
axis.title.y = element_text(face = "bold", margin = margin(r = 10)),
panel.grid = element_blank(),
legend.position = "none")
# View
abundViolin
abundViolin
ggplot(abund_df, aes(x = Model, y = Density, fill = Model)) +
geom_violin(trim = FALSE, alpha = 0.6, adjust = 5) +
stat_summary(fun = mean, geom = "point", shape = 20,
size = 3, fill = "black") +
labs(x = "Model", y = "Abundance") +
scale_fill_manual(values = c("PC MCR" = "orange",
"AV Bsong" = "red",
"AV Bnet" = "blue"
))
# Read in abundance df
cmr_abund_df <-readRDS("./Data/Model_Data/PC_MCR_abund_df.rds")
bsong_abund_df <- readRDS("./Data/Model_Data/ARU_Bsong_abund_df.rds")
bnet_abund_df <- readRDS("./Data/Model_Data/ARU_Bnet_abund_df.rds")
# Plot violin
abundViolin <- ggplot(abund_df, aes(x = Model, y = Density, fill = Model)) +
geom_violin(trim = FALSE, alpha = 0.6, adjust = 5) +
stat_summary(fun = mean, geom = "point", shape = 20,
size = 3, fill = "black") +
labs(x = "Model", y = "Abundance") +
scale_fill_manual(values = c("PC MCR" = "orange",
"AV Bsong" = "red",
"AV Bnet" = "blue"
)) +
scale_y_continuous(limits = c(0, 2000),
breaks = seq(0, 2000, by = 100),
labels = scales::comma) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, face = "bold"),
axis.title.x = element_text(face = "bold", margin = margin(t = 10)),
axis.title.y = element_text(face = "bold", margin = margin(r = 10)),
panel.grid = element_blank(),
legend.position = "none")
library(tidyverse)
library(gridExtra)
# Plot violin
abundViolin <- ggplot(abund_df, aes(x = Model, y = Density, fill = Model)) +
geom_violin(trim = FALSE, alpha = 0.6, adjust = 5) +
stat_summary(fun = mean, geom = "point", shape = 20,
size = 3, fill = "black") +
labs(x = "Model", y = "Abundance") +
scale_fill_manual(values = c("PC MCR" = "orange",
"AV Bsong" = "red",
"AV Bnet" = "blue"
)) +
scale_y_continuous(limits = c(0, 2000),
breaks = seq(0, 2000, by = 100),
labels = scales::comma) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, face = "bold"),
axis.title.x = element_text(face = "bold", margin = margin(t = 10)),
axis.title.y = element_text(face = "bold", margin = margin(r = 10)),
panel.grid = element_blank(),
legend.position = "none")
# Combine abundance df into one dataframe
abund_df <- rbind(cmr_abund_df,
bsong_abund_df,
bnet_abund_df
)
abund_df <- abund_df %>% mutate(Model = factor(Model, levels = c("PC MCR",  "AV Bsong", "AV Bnet")))
# Plot violin
abundViolin <- ggplot(abund_df, aes(x = Model, y = Density, fill = Model)) +
geom_violin(trim = FALSE, alpha = 0.6, adjust = 5) +
stat_summary(fun = mean, geom = "point", shape = 20,
size = 3, fill = "black") +
labs(x = "Model", y = "Abundance") +
scale_fill_manual(values = c("PC MCR" = "orange",
"AV Bsong" = "red",
"AV Bnet" = "blue"
)) +
scale_y_continuous(limits = c(0, 2000),
breaks = seq(0, 2000, by = 100),
labels = scales::comma) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, face = "bold"),
axis.title.x = element_text(face = "bold", margin = margin(t = 10)),
axis.title.y = element_text(face = "bold", margin = margin(r = 10)),
panel.grid = element_blank(),
legend.position = "none")
# View
abundViolin
# Plot violin
abundViolin <- ggplot(abund_df, aes(x = Model, y = Density, fill = Model)) +
geom_violin(trim = FALSE, alpha = 0.6, adjust = 5) +
stat_summary(fun = mean, geom = "point", shape = 20,
size = 3, fill = "black") +
labs(x = "Model", y = "Abundance") +
scale_fill_manual(values = c("PC MCR" = "orange",
"AV Bsong" = "red",
"AV Bnet" = "blue"
)) +
scale_y_continuous(limits = c(0, 1200),
breaks = seq(0, 1200, by = 100),
labels = scales::comma) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, face = "bold"),
axis.title.x = element_text(face = "bold", margin = margin(t = 10)),
axis.title.y = element_text(face = "bold", margin = margin(r = 10)),
panel.grid = element_blank(),
legend.position = "none")
# View
abundViolin
# Export
ggsave(plot = abundViolin, "./Figures/Figure3.5_AbundEst.jpeg",width = 8, height = 5, dpi = 300)
write.csv(abund_sum, "./Figures/Table2.2_AbundanceEstimates.csv")
